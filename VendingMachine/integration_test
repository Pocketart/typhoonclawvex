#include <Wire.h>
#include <Keypad.h>

const byte ROWS = 4;
const byte COLS = 4;
const int spd = 255;  //max value 255, 100 is too low

char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'#','0','*','D'}
};
byte rowPins[ROWS] = {21, 20, 19 ,18}; 
byte colPins[COLS] = {15, 14, 16, 10}; 

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

struct Motor
{
  char key; //key assignment
  int en;   //analog pin
  int in1;  //digital pin 1
  int in2;  //digital pin 2
  int dur;  //specific motor duration for one retrieval
};
Motor motor1 = {'1', A7, 5, 6, 1000};
Motor motor2 = {'2', A2, 3, 4, 1000};

void initiate_motor(Motor m)
{
  pinMode(m.en, OUTPUT);
  pinMode(m.in1, OUTPUT);
  pinMode(m.in2, OUTPUT);
  analogWrite(m.en, spd);
}

void retrieve(Motor m)
{
  digitalWrite(m.in1, HIGH);
  digitalWrite(m.in2, LOW);
  delay(m.dur);
  digitalWrite(m.in1, LOW);
}

void setup() {
  // put your setup code here, to run once:
   Wire.begin();
   initiate_motor(motor1);
   initiate_motor(motor2);
}

void loop() {
  // put your main code here, to run repeatedly:
  char key = keypad.getKey();
  if (key != NO_KEY){
    switch(key)
    {
      case motor1.key:
        retrieve(motor1);
        break;
      case motor2.key:
        retrieve(motor2);
        break;
      default:
        Wire.beginTransmission(8);
        Wire.write(key);
        Wire.endTransmission();
        break;
    }
  }
}
